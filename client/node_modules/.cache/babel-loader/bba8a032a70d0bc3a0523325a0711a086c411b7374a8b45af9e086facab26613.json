{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fishk\\\\Personal CS projects\\\\seenIt\\\\client\\\\src\\\\pages\\\\PostPage.js\";\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PostPage(props) {\n  const generateComment = e => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      const com = e.target.value;\n      const postId = props.post._id;\n      const commentData = {\n        content: com\n      };\n      axios.post(`http://localhost:8000/comments/${postId}`, commentData).then(response => {\n        console.log('Comment created:', response.data);\n        // You can update the UI to show the new comment\n        props.setComments([...props.comments, response.data]);\n        props.setPosts();\n      }).catch(error => {\n        console.error('Error creating comment:', error);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: props.post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: props.post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onKeyDown: generateComment,\n        placeholder: \"Comment...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-comments\",\n        children: [console.log(props.post.comments), console.log(\"here\"), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: props.comments.filter(c => props.post.comments.includes(c._id)).map(c => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-div\",\n              children: [console.log(c), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: c.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n                className: \"post-breaks\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n_c = PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["axios","React","useState","useEffect","jsxDEV","_jsxDEV","PostPage","props","generateComment","e","key","preventDefault","com","target","value","postId","post","_id","commentData","content","then","response","console","log","data","setComments","comments","setPosts","catch","error","children","title","fileName","_jsxFileName","lineNumber","columnNumber","className","type","onKeyDown","placeholder","filter","c","includes","map","_c","$RefreshReg$"],"sources":["C:/Users/fishk/Personal CS projects/seenIt/client/src/pages/PostPage.js"],"sourcesContent":["import axios from 'axios';\r\nimport React,{ useState, useEffect } from 'react';\r\nexport default function PostPage(props){\r\n    const generateComment=(e) =>{\r\n            if (e.key ===\"Enter\"){\r\n                e.preventDefault();\r\n                const com = e.target.value\r\n                const postId = props.post._id\r\n                const commentData={\r\n                    content: com\r\n                }\r\n\r\n                axios.post(`http://localhost:8000/comments/${postId}`, commentData)\r\n                .then(response => {\r\n                    console.log('Comment created:', response.data);\r\n                    // You can update the UI to show the new comment\r\n                    props.setComments([...props.comments, response.data]);\r\n                    props.setPosts()\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error creating comment:', error);\r\n                });\r\n\r\n                \r\n                   \r\n                  \r\n                \r\n            }\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            <div>\r\n            <h1>{props.post.title}</h1>\r\n            <p>{props.post.content}</p>\r\n            </div>\r\n\r\n            <div className=\"comments\">\r\n                <input type=\"text\" onKeyDown={generateComment} placeholder=\"Comment...\"/>\r\n                <div className=\"post-comments\">\r\n                    {console.log(props.post.comments)}\r\n                    {console.log(\"here\")}\r\n                    <ul>\r\n                        {props.comments.filter(c => props.post.comments.includes(c._id)\r\n                        ).map(c => (\r\n                            <li>\r\n                            <div className=\"post-div\">\r\n                                {console.log(c)}\r\n                                <p>{c.content}</p>\r\n                            <hr className=\"post-breaks\"/>\r\n                            </div>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div> \r\n            </div>\r\n\r\n            {/* <div className=\"post-comments\">\r\n                <ul>\r\n                    {props.post.comments.map(post => (\r\n                        <div className=\"post-div\">\r\n                            g Insert method to search using comment ID\r\n                        <hr className=\"post-breaks\"/>\r\n                        </div>\r\n                    ))}\r\n                </ul>\r\n            </div>  */}\r\n\r\n        </div>\r\n    )\r\n    \r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}